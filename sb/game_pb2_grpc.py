# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import game_pb2 as game__pb2


class SBGameServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGame = channel.unary_unary(
                '/sb.SBGameService/CreateGame',
                request_serializer=game__pb2.SBGameState.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )
        self.AttemptGuess = channel.unary_unary(
                '/sb.SBGameService/AttemptGuess',
                request_serializer=game__pb2.Attempt.SerializeToString,
                response_deserializer=game__pb2.AttemptEvaluation.FromString,
                )
        self.GetSBGameState = channel.unary_unary(
                '/sb.SBGameService/GetSBGameState',
                request_serializer=game__pb2.StateRequest.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )
        self.GetHighscores = channel.unary_unary(
                '/sb.SBGameService/GetHighscores',
                request_serializer=game__pb2.Player.SerializeToString,
                response_deserializer=game__pb2.SBHighScores.FromString,
                )


class SBGameServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttemptGuess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSBGameState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHighscores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SBGameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=game__pb2.SBGameState.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
            'AttemptGuess': grpc.unary_unary_rpc_method_handler(
                    servicer.AttemptGuess,
                    request_deserializer=game__pb2.Attempt.FromString,
                    response_serializer=game__pb2.AttemptEvaluation.SerializeToString,
            ),
            'GetSBGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSBGameState,
                    request_deserializer=game__pb2.StateRequest.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
            'GetHighscores': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHighscores,
                    request_deserializer=game__pb2.Player.FromString,
                    response_serializer=game__pb2.SBHighScores.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sb.SBGameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SBGameService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sb.SBGameService/CreateGame',
            game__pb2.SBGameState.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttemptGuess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sb.SBGameService/AttemptGuess',
            game__pb2.Attempt.SerializeToString,
            game__pb2.AttemptEvaluation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSBGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sb.SBGameService/GetSBGameState',
            game__pb2.StateRequest.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHighscores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sb.SBGameService/GetHighscores',
            game__pb2.Player.SerializeToString,
            game__pb2.SBHighScores.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
