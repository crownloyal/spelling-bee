# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import game_pb2 as game__pb2


class SBGameServicerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createGame = channel.unary_unary(
                '/sbgame.SBGameServicer/createGame',
                request_serializer=game__pb2.Player.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )
        self.attemptGuess = channel.unary_unary(
                '/sbgame.SBGameServicer/attemptGuess',
                request_serializer=game__pb2.Attempt.SerializeToString,
                response_deserializer=game__pb2.AttemptEvaluation.FromString,
                )
        self.getSBGameState = channel.unary_unary(
                '/sbgame.SBGameServicer/getSBGameState',
                request_serializer=game__pb2.Player.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )
        self.getHighscrores = channel.unary_stream(
                '/sbgame.SBGameServicer/getHighscrores',
                request_serializer=game__pb2.Player.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )
        self.getMyHighscrores = channel.unary_stream(
                '/sbgame.SBGameServicer/getMyHighscrores',
                request_serializer=game__pb2.Player.SerializeToString,
                response_deserializer=game__pb2.SBGameState.FromString,
                )


class SBGameServicerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def createGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attemptGuess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSBGameState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHighscrores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMyHighscrores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SBGameServicerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createGame': grpc.unary_unary_rpc_method_handler(
                    servicer.createGame,
                    request_deserializer=game__pb2.Player.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
            'attemptGuess': grpc.unary_unary_rpc_method_handler(
                    servicer.attemptGuess,
                    request_deserializer=game__pb2.Attempt.FromString,
                    response_serializer=game__pb2.AttemptEvaluation.SerializeToString,
            ),
            'getSBGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.getSBGameState,
                    request_deserializer=game__pb2.Player.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
            'getHighscrores': grpc.unary_stream_rpc_method_handler(
                    servicer.getHighscrores,
                    request_deserializer=game__pb2.Player.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
            'getMyHighscrores': grpc.unary_stream_rpc_method_handler(
                    servicer.getMyHighscrores,
                    request_deserializer=game__pb2.Player.FromString,
                    response_serializer=game__pb2.SBGameState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sbgame.SBGameServicer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SBGameServicer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def createGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sbgame.SBGameServicer/createGame',
            game__pb2.Player.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def attemptGuess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sbgame.SBGameServicer/attemptGuess',
            game__pb2.Attempt.SerializeToString,
            game__pb2.AttemptEvaluation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSBGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sbgame.SBGameServicer/getSBGameState',
            game__pb2.Player.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHighscrores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sbgame.SBGameServicer/getHighscrores',
            game__pb2.Player.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMyHighscrores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sbgame.SBGameServicer/getMyHighscrores',
            game__pb2.Player.SerializeToString,
            game__pb2.SBGameState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
